{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nvar _defineProperty = require(\"/opt/miami-hackathon-starknet-p2e-main/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\n\nvar _classCallCheck = require(\"/opt/miami-hackathon-starknet-p2e-main/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/opt/miami-hackathon-starknet-p2e-main/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WalletSDKConnection = void 0;\n\nvar rxjs_1 = require(\"rxjs\");\n\nvar operators_1 = require(\"rxjs/operators\");\n\nvar EventListener_1 = require(\"./EventListener\");\n\nvar Session_1 = require(\"../relay/Session\");\n\nvar types_1 = require(\"../types\");\n\nvar ClientMessage_1 = require(\"./ClientMessage\");\n\nvar RxWebSocket_1 = require(\"./RxWebSocket\");\n\nvar ServerMessage_1 = require(\"./ServerMessage\");\n\nvar HEARTBEAT_INTERVAL = 10000;\nvar REQUEST_TIMEOUT = 60000;\n/**\n * Coinbase Wallet Connection\n */\n\nvar WalletSDKConnection = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   * @param sessionId Session ID\n   * @param sessionKey Session Key\n   * @param linkAPIUrl Coinbase Wallet link server URL\n   * @param [WebSocketClass] Custom WebSocket implementation\n   */\n  function WalletSDKConnection(sessionId, sessionKey, linkAPIUrl, eventListener) {\n    var _this = this;\n\n    var WebSocketClass = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : WebSocket;\n\n    _classCallCheck(this, WalletSDKConnection);\n\n    this.sessionId = sessionId;\n    this.sessionKey = sessionKey;\n    this.eventListener = eventListener;\n    this.subscriptions = new rxjs_1.Subscription();\n    this.destroyed = false;\n    this.lastHeartbeatResponse = 0;\n    this.nextReqId = (0, types_1.IntNumber)(1);\n    this.connectedSubject = new rxjs_1.BehaviorSubject(false);\n    this.linkedSubject = new rxjs_1.BehaviorSubject(false);\n    this.sessionConfigSubject = new rxjs_1.ReplaySubject(1);\n    var ws = new RxWebSocket_1.RxWebSocket(linkAPIUrl + \"/rpc\", WebSocketClass);\n    this.ws = ws; // attempt to reconnect every 5 seconds when disconnected\n\n    this.subscriptions.add(ws.connectionState$.pipe((0, operators_1.tap)(function (state) {\n      var _a;\n\n      return (_a = _this.eventListener) === null || _a === void 0 ? void 0 : _a.onEvent(EventListener_1.EVENTS.CONNECTED_STATE_CHANGE, {\n        state: state,\n        sessionIdHash: Session_1.Session.hash(sessionId)\n      });\n    }), // ignore initial DISCONNECTED state\n    (0, operators_1.skip)(1), // if DISCONNECTED and not destroyed\n    (0, operators_1.filter)(function (cs) {\n      return cs === RxWebSocket_1.ConnectionState.DISCONNECTED && !_this.destroyed;\n    }), // wait 5 seconds\n    (0, operators_1.delay)(5000), // check whether it's destroyed again\n    (0, operators_1.filter)(function (_) {\n      return !_this.destroyed;\n    }), // reconnect\n    (0, operators_1.flatMap)(function (_) {\n      return ws.connect();\n    }), (0, operators_1.retry)()).subscribe()); // perform authentication upon connection\n\n    this.subscriptions.add(ws.connectionState$.pipe( // ignore initial DISCONNECTED and CONNECTING states\n    (0, operators_1.skip)(2), (0, operators_1.switchMap)(function (cs) {\n      return (0, rxjs_1.iif)(function () {\n        return cs === RxWebSocket_1.ConnectionState.CONNECTED;\n      }, // if CONNECTED, authenticate, and then check link status\n      _this.authenticate().pipe((0, operators_1.tap)(function (_) {\n        return _this.sendIsLinked();\n      }), (0, operators_1.tap)(function (_) {\n        return _this.sendGetSessionConfig();\n      }), (0, operators_1.map)(function (_) {\n        return true;\n      })), // if not CONNECTED, emit false immediately\n      (0, rxjs_1.of)(false));\n    }), (0, operators_1.distinctUntilChanged)(), (0, operators_1.catchError)(function (_) {\n      return (0, rxjs_1.of)(false);\n    })).subscribe(function (connected) {\n      return _this.connectedSubject.next(connected);\n    })); // send heartbeat every n seconds while connected\n\n    this.subscriptions.add(ws.connectionState$.pipe( // ignore initial DISCONNECTED state\n    (0, operators_1.skip)(1), (0, operators_1.switchMap)(function (cs) {\n      return (0, rxjs_1.iif)(function () {\n        return cs === RxWebSocket_1.ConnectionState.CONNECTED;\n      }, // if CONNECTED, start the heartbeat timer\n      (0, rxjs_1.timer)(0, HEARTBEAT_INTERVAL));\n    })).subscribe(function (i) {\n      return (// first timer event updates lastHeartbeat timestamp\n        // subsequent calls send heartbeat message\n        i === 0 ? _this.updateLastHeartbeat() : _this.heartbeat()\n      );\n    })); // handle server's heartbeat responses\n\n    this.subscriptions.add(ws.incomingData$.pipe((0, operators_1.filter)(function (m) {\n      return m === \"h\";\n    })).subscribe(function (_) {\n      return _this.updateLastHeartbeat();\n    })); // handle link status updates\n\n    this.subscriptions.add(ws.incomingJSONData$.pipe((0, operators_1.filter)(function (m) {\n      return [\"IsLinkedOK\", \"Linked\"].includes(m.type);\n    })).subscribe(function (m) {\n      var _a;\n\n      var msg = m;\n      (_a = _this.eventListener) === null || _a === void 0 ? void 0 : _a.onEvent(EventListener_1.EVENTS.LINKED, {\n        sessionIdHash: Session_1.Session.hash(sessionId),\n        linked: msg.linked,\n        type: m.type,\n        onlineGuests: msg.onlineGuests\n      });\n\n      _this.linkedSubject.next(msg.linked || msg.onlineGuests > 0);\n    })); // handle session config updates\n\n    this.subscriptions.add(ws.incomingJSONData$.pipe((0, operators_1.filter)(function (m) {\n      return [\"GetSessionConfigOK\", \"SessionConfigUpdated\"].includes(m.type);\n    })).subscribe(function (m) {\n      var _a;\n\n      var msg = m;\n      (_a = _this.eventListener) === null || _a === void 0 ? void 0 : _a.onEvent(EventListener_1.EVENTS.SESSION_CONFIG_RECEIVED, {\n        sessionIdHash: Session_1.Session.hash(sessionId),\n        metadata_keys: msg && msg.metadata ? Object.keys(msg.metadata) : undefined\n      });\n\n      _this.sessionConfigSubject.next({\n        webhookId: msg.webhookId,\n        webhookUrl: msg.webhookUrl,\n        metadata: msg.metadata\n      });\n    }));\n  }\n  /**\n   * Make a connection to the server\n   */\n\n\n  _createClass(WalletSDKConnection, [{\n    key: \"connect\",\n    value: function connect() {\n      var _a;\n\n      if (this.destroyed) {\n        throw new Error(\"instance is destroyed\");\n      }\n\n      (_a = this.eventListener) === null || _a === void 0 ? void 0 : _a.onEvent(EventListener_1.EVENTS.STARTED_CONNECTING, {\n        sessionIdHash: Session_1.Session.hash(this.sessionId)\n      });\n      this.ws.connect().subscribe();\n    }\n    /**\n     * Terminate connection, and mark as destroyed. To reconnect, create a new\n     * instance of WalletSDKConnection\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _a;\n\n      this.subscriptions.unsubscribe();\n      this.ws.disconnect();\n      (_a = this.eventListener) === null || _a === void 0 ? void 0 : _a.onEvent(EventListener_1.EVENTS.DISCONNECTED, {\n        sessionIdHash: Session_1.Session.hash(this.sessionId)\n      });\n      this.destroyed = true;\n    }\n  }, {\n    key: \"isDestroyed\",\n    get: function get() {\n      return this.destroyed;\n    }\n    /**\n     * Emit true if connected and authenticated, else false\n     * @returns an Observable\n     */\n\n  }, {\n    key: \"connected$\",\n    get: function get() {\n      return this.connectedSubject.asObservable();\n    }\n    /**\n     * Emit once connected\n     * @returns an Observable\n     */\n\n  }, {\n    key: \"onceConnected$\",\n    get: function get() {\n      return this.connected$.pipe((0, operators_1.filter)(function (v) {\n        return v;\n      }), (0, operators_1.take)(1), (0, operators_1.map)(function () {\n        return void 0;\n      }));\n    }\n    /**\n     * Emit true if linked (a guest has joined before)\n     * @returns an Observable\n     */\n\n  }, {\n    key: \"linked$\",\n    get: function get() {\n      return this.linkedSubject.asObservable();\n    }\n    /**\n     * Emit once when linked\n     * @returns an Observable\n     */\n\n  }, {\n    key: \"onceLinked$\",\n    get: function get() {\n      return this.linked$.pipe((0, operators_1.filter)(function (v) {\n        return v;\n      }), (0, operators_1.take)(1), (0, operators_1.map)(function () {\n        return void 0;\n      }));\n    }\n    /**\n     * Emit current session config if available, and subsequent updates\n     * @returns an Observable for the session config\n     */\n\n  }, {\n    key: \"sessionConfig$\",\n    get: function get() {\n      return this.sessionConfigSubject.asObservable();\n    }\n    /**\n     * Emit incoming Event messages\n     * @returns an Observable for the messages\n     */\n\n  }, {\n    key: \"incomingEvent$\",\n    get: function get() {\n      return this.ws.incomingJSONData$.pipe((0, operators_1.filter)(function (m) {\n        if (m.type !== \"Event\") {\n          return false;\n        }\n\n        var sme = m;\n        return typeof sme.sessionId === \"string\" && typeof sme.eventId === \"string\" && typeof sme.event === \"string\" && typeof sme.data === \"string\";\n      }), (0, operators_1.map)(function (m) {\n        return m;\n      }));\n    }\n    /**\n     * Set session metadata in SessionConfig object\n     * @param key\n     * @param value\n     * @returns an Observable that completes when successful\n     */\n\n  }, {\n    key: \"setSessionMetadata\",\n    value: function setSessionMetadata(key, value) {\n      var _this2 = this;\n\n      var message = (0, ClientMessage_1.ClientMessageSetSessionConfig)({\n        id: (0, types_1.IntNumber)(this.nextReqId++),\n        sessionId: this.sessionId,\n        metadata: _defineProperty({}, key, value)\n      });\n      return this.onceConnected$.pipe((0, operators_1.flatMap)(function (_) {\n        return _this2.makeRequest(message);\n      }), (0, operators_1.map)(function (res) {\n        if ((0, ServerMessage_1.isServerMessageFail)(res)) {\n          throw new Error(res.error || \"failed to set session metadata\");\n        }\n      }));\n    }\n    /**\n     * Publish an event and emit event ID when successful\n     * @param event event name\n     * @param data event data\n     * @param callWebhook whether the webhook should be invoked\n     * @returns an Observable that emits event ID when successful\n     */\n\n  }, {\n    key: \"publishEvent\",\n    value: function publishEvent(event, data) {\n      var _this3 = this;\n\n      var callWebhook = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var message = (0, ClientMessage_1.ClientMessagePublishEvent)({\n        id: (0, types_1.IntNumber)(this.nextReqId++),\n        sessionId: this.sessionId,\n        event: event,\n        data: data,\n        callWebhook: callWebhook\n      });\n      return this.onceLinked$.pipe((0, operators_1.flatMap)(function (_) {\n        return _this3.makeRequest(message);\n      }), (0, operators_1.map)(function (res) {\n        if ((0, ServerMessage_1.isServerMessageFail)(res)) {\n          throw new Error(res.error || \"failed to publish event\");\n        }\n\n        return res.eventId;\n      }));\n    }\n  }, {\n    key: \"sendData\",\n    value: function sendData(message) {\n      this.ws.sendData(JSON.stringify(message));\n    }\n  }, {\n    key: \"updateLastHeartbeat\",\n    value: function updateLastHeartbeat() {\n      this.lastHeartbeatResponse = Date.now();\n    }\n  }, {\n    key: \"heartbeat\",\n    value: function heartbeat() {\n      if (Date.now() - this.lastHeartbeatResponse > HEARTBEAT_INTERVAL * 2) {\n        this.ws.disconnect();\n        return;\n      }\n\n      try {\n        this.ws.sendData(\"h\");\n      } catch (_a) {}\n    }\n  }, {\n    key: \"makeRequest\",\n    value: function makeRequest(message) {\n      var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : REQUEST_TIMEOUT;\n      var reqId = message.id;\n\n      try {\n        this.sendData(message);\n      } catch (err) {\n        return (0, rxjs_1.throwError)(err);\n      } // await server message with corresponding id\n\n\n      return this.ws.incomingJSONData$.pipe((0, operators_1.timeoutWith)(timeout, (0, rxjs_1.throwError)(new Error(\"request \".concat(reqId, \" timed out\")))), (0, operators_1.filter)(function (m) {\n        return m.id === reqId;\n      }), (0, operators_1.take)(1));\n    }\n  }, {\n    key: \"authenticate\",\n    value: function authenticate() {\n      var msg = (0, ClientMessage_1.ClientMessageHostSession)({\n        id: (0, types_1.IntNumber)(this.nextReqId++),\n        sessionId: this.sessionId,\n        sessionKey: this.sessionKey\n      });\n      return this.makeRequest(msg).pipe((0, operators_1.map)(function (res) {\n        if ((0, ServerMessage_1.isServerMessageFail)(res)) {\n          throw new Error(res.error || \"failed to authentcate\");\n        }\n      }));\n    }\n  }, {\n    key: \"sendIsLinked\",\n    value: function sendIsLinked() {\n      var msg = (0, ClientMessage_1.ClientMessageIsLinked)({\n        id: (0, types_1.IntNumber)(this.nextReqId++),\n        sessionId: this.sessionId\n      });\n      this.sendData(msg);\n    }\n  }, {\n    key: \"sendGetSessionConfig\",\n    value: function sendGetSessionConfig() {\n      var msg = (0, ClientMessage_1.ClientMessageGetSessionConfig)({\n        id: (0, types_1.IntNumber)(this.nextReqId++),\n        sessionId: this.sessionId\n      });\n      this.sendData(msg);\n    }\n  }]);\n\n  return WalletSDKConnection;\n}();\n\nexports.WalletSDKConnection = WalletSDKConnection;","map":{"version":3,"names":["Object","defineProperty","exports","value","WalletSDKConnection","rxjs_1","require","operators_1","EventListener_1","Session_1","types_1","ClientMessage_1","RxWebSocket_1","ServerMessage_1","HEARTBEAT_INTERVAL","REQUEST_TIMEOUT","sessionId","sessionKey","linkAPIUrl","eventListener","WebSocketClass","WebSocket","subscriptions","Subscription","destroyed","lastHeartbeatResponse","nextReqId","IntNumber","connectedSubject","BehaviorSubject","linkedSubject","sessionConfigSubject","ReplaySubject","ws","RxWebSocket","add","connectionState$","pipe","tap","state","_a","onEvent","EVENTS","CONNECTED_STATE_CHANGE","sessionIdHash","Session","hash","skip","filter","cs","ConnectionState","DISCONNECTED","delay","_","flatMap","connect","retry","subscribe","switchMap","iif","CONNECTED","authenticate","sendIsLinked","sendGetSessionConfig","map","of","distinctUntilChanged","catchError","connected","next","timer","i","updateLastHeartbeat","heartbeat","incomingData$","m","incomingJSONData$","includes","type","msg","LINKED","linked","onlineGuests","SESSION_CONFIG_RECEIVED","metadata_keys","metadata","keys","undefined","webhookId","webhookUrl","Error","STARTED_CONNECTING","unsubscribe","disconnect","asObservable","connected$","v","take","linked$","sme","eventId","event","data","key","message","ClientMessageSetSessionConfig","id","onceConnected$","makeRequest","res","isServerMessageFail","error","callWebhook","ClientMessagePublishEvent","onceLinked$","sendData","JSON","stringify","Date","now","timeout","reqId","err","throwError","timeoutWith","ClientMessageHostSession","ClientMessageIsLinked","ClientMessageGetSessionConfig"],"sources":["/opt/miami-hackathon-starknet-p2e-main/node_modules/@coinbase/wallet-sdk/dist/connection/WalletSDKConnection.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WalletSDKConnection = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst EventListener_1 = require(\"./EventListener\");\nconst Session_1 = require(\"../relay/Session\");\nconst types_1 = require(\"../types\");\nconst ClientMessage_1 = require(\"./ClientMessage\");\nconst RxWebSocket_1 = require(\"./RxWebSocket\");\nconst ServerMessage_1 = require(\"./ServerMessage\");\nconst HEARTBEAT_INTERVAL = 10000;\nconst REQUEST_TIMEOUT = 60000;\n/**\n * Coinbase Wallet Connection\n */\nclass WalletSDKConnection {\n    /**\n     * Constructor\n     * @param sessionId Session ID\n     * @param sessionKey Session Key\n     * @param linkAPIUrl Coinbase Wallet link server URL\n     * @param [WebSocketClass] Custom WebSocket implementation\n     */\n    constructor(sessionId, sessionKey, linkAPIUrl, eventListener, WebSocketClass = WebSocket) {\n        this.sessionId = sessionId;\n        this.sessionKey = sessionKey;\n        this.eventListener = eventListener;\n        this.subscriptions = new rxjs_1.Subscription();\n        this.destroyed = false;\n        this.lastHeartbeatResponse = 0;\n        this.nextReqId = (0, types_1.IntNumber)(1);\n        this.connectedSubject = new rxjs_1.BehaviorSubject(false);\n        this.linkedSubject = new rxjs_1.BehaviorSubject(false);\n        this.sessionConfigSubject = new rxjs_1.ReplaySubject(1);\n        const ws = new RxWebSocket_1.RxWebSocket(linkAPIUrl + \"/rpc\", WebSocketClass);\n        this.ws = ws;\n        // attempt to reconnect every 5 seconds when disconnected\n        this.subscriptions.add(ws.connectionState$\n            .pipe((0, operators_1.tap)(state => {\n            var _a;\n            return (_a = this.eventListener) === null || _a === void 0 ? void 0 : _a.onEvent(EventListener_1.EVENTS.CONNECTED_STATE_CHANGE, {\n                state,\n                sessionIdHash: Session_1.Session.hash(sessionId)\n            });\n        }), \n        // ignore initial DISCONNECTED state\n        (0, operators_1.skip)(1), \n        // if DISCONNECTED and not destroyed\n        (0, operators_1.filter)(cs => cs === RxWebSocket_1.ConnectionState.DISCONNECTED && !this.destroyed), \n        // wait 5 seconds\n        (0, operators_1.delay)(5000), \n        // check whether it's destroyed again\n        (0, operators_1.filter)(_ => !this.destroyed), \n        // reconnect\n        (0, operators_1.flatMap)(_ => ws.connect()), (0, operators_1.retry)())\n            .subscribe());\n        // perform authentication upon connection\n        this.subscriptions.add(ws.connectionState$\n            .pipe(\n        // ignore initial DISCONNECTED and CONNECTING states\n        (0, operators_1.skip)(2), (0, operators_1.switchMap)(cs => (0, rxjs_1.iif)(() => cs === RxWebSocket_1.ConnectionState.CONNECTED, \n        // if CONNECTED, authenticate, and then check link status\n        this.authenticate().pipe((0, operators_1.tap)(_ => this.sendIsLinked()), (0, operators_1.tap)(_ => this.sendGetSessionConfig()), (0, operators_1.map)(_ => true)), \n        // if not CONNECTED, emit false immediately\n        (0, rxjs_1.of)(false))), (0, operators_1.distinctUntilChanged)(), (0, operators_1.catchError)(_ => (0, rxjs_1.of)(false)))\n            .subscribe(connected => this.connectedSubject.next(connected)));\n        // send heartbeat every n seconds while connected\n        this.subscriptions.add(ws.connectionState$\n            .pipe(\n        // ignore initial DISCONNECTED state\n        (0, operators_1.skip)(1), (0, operators_1.switchMap)(cs => (0, rxjs_1.iif)(() => cs === RxWebSocket_1.ConnectionState.CONNECTED, \n        // if CONNECTED, start the heartbeat timer\n        (0, rxjs_1.timer)(0, HEARTBEAT_INTERVAL))))\n            .subscribe(i => \n        // first timer event updates lastHeartbeat timestamp\n        // subsequent calls send heartbeat message\n        i === 0 ? this.updateLastHeartbeat() : this.heartbeat()));\n        // handle server's heartbeat responses\n        this.subscriptions.add(ws.incomingData$\n            .pipe((0, operators_1.filter)(m => m === \"h\"))\n            .subscribe(_ => this.updateLastHeartbeat()));\n        // handle link status updates\n        this.subscriptions.add(ws.incomingJSONData$\n            .pipe((0, operators_1.filter)(m => [\"IsLinkedOK\", \"Linked\"].includes(m.type)))\n            .subscribe(m => {\n            var _a;\n            const msg = m;\n            (_a = this.eventListener) === null || _a === void 0 ? void 0 : _a.onEvent(EventListener_1.EVENTS.LINKED, {\n                sessionIdHash: Session_1.Session.hash(sessionId),\n                linked: msg.linked,\n                type: m.type,\n                onlineGuests: msg.onlineGuests\n            });\n            this.linkedSubject.next(msg.linked || msg.onlineGuests > 0);\n        }));\n        // handle session config updates\n        this.subscriptions.add(ws.incomingJSONData$\n            .pipe((0, operators_1.filter)(m => [\"GetSessionConfigOK\", \"SessionConfigUpdated\"].includes(m.type)))\n            .subscribe(m => {\n            var _a;\n            const msg = m;\n            (_a = this.eventListener) === null || _a === void 0 ? void 0 : _a.onEvent(EventListener_1.EVENTS.SESSION_CONFIG_RECEIVED, {\n                sessionIdHash: Session_1.Session.hash(sessionId),\n                metadata_keys: msg && msg.metadata ? Object.keys(msg.metadata) : undefined\n            });\n            this.sessionConfigSubject.next({\n                webhookId: msg.webhookId,\n                webhookUrl: msg.webhookUrl,\n                metadata: msg.metadata\n            });\n        }));\n    }\n    /**\n     * Make a connection to the server\n     */\n    connect() {\n        var _a;\n        if (this.destroyed) {\n            throw new Error(\"instance is destroyed\");\n        }\n        (_a = this.eventListener) === null || _a === void 0 ? void 0 : _a.onEvent(EventListener_1.EVENTS.STARTED_CONNECTING, {\n            sessionIdHash: Session_1.Session.hash(this.sessionId)\n        });\n        this.ws.connect().subscribe();\n    }\n    /**\n     * Terminate connection, and mark as destroyed. To reconnect, create a new\n     * instance of WalletSDKConnection\n     */\n    destroy() {\n        var _a;\n        this.subscriptions.unsubscribe();\n        this.ws.disconnect();\n        (_a = this.eventListener) === null || _a === void 0 ? void 0 : _a.onEvent(EventListener_1.EVENTS.DISCONNECTED, {\n            sessionIdHash: Session_1.Session.hash(this.sessionId)\n        });\n        this.destroyed = true;\n    }\n    get isDestroyed() {\n        return this.destroyed;\n    }\n    /**\n     * Emit true if connected and authenticated, else false\n     * @returns an Observable\n     */\n    get connected$() {\n        return this.connectedSubject.asObservable();\n    }\n    /**\n     * Emit once connected\n     * @returns an Observable\n     */\n    get onceConnected$() {\n        return this.connected$.pipe((0, operators_1.filter)(v => v), (0, operators_1.take)(1), (0, operators_1.map)(() => void 0));\n    }\n    /**\n     * Emit true if linked (a guest has joined before)\n     * @returns an Observable\n     */\n    get linked$() {\n        return this.linkedSubject.asObservable();\n    }\n    /**\n     * Emit once when linked\n     * @returns an Observable\n     */\n    get onceLinked$() {\n        return this.linked$.pipe((0, operators_1.filter)(v => v), (0, operators_1.take)(1), (0, operators_1.map)(() => void 0));\n    }\n    /**\n     * Emit current session config if available, and subsequent updates\n     * @returns an Observable for the session config\n     */\n    get sessionConfig$() {\n        return this.sessionConfigSubject.asObservable();\n    }\n    /**\n     * Emit incoming Event messages\n     * @returns an Observable for the messages\n     */\n    get incomingEvent$() {\n        return this.ws.incomingJSONData$.pipe((0, operators_1.filter)(m => {\n            if (m.type !== \"Event\") {\n                return false;\n            }\n            const sme = m;\n            return (typeof sme.sessionId === \"string\" &&\n                typeof sme.eventId === \"string\" &&\n                typeof sme.event === \"string\" &&\n                typeof sme.data === \"string\");\n        }), (0, operators_1.map)(m => m));\n    }\n    /**\n     * Set session metadata in SessionConfig object\n     * @param key\n     * @param value\n     * @returns an Observable that completes when successful\n     */\n    setSessionMetadata(key, value) {\n        const message = (0, ClientMessage_1.ClientMessageSetSessionConfig)({\n            id: (0, types_1.IntNumber)(this.nextReqId++),\n            sessionId: this.sessionId,\n            metadata: { [key]: value }\n        });\n        return this.onceConnected$.pipe((0, operators_1.flatMap)(_ => this.makeRequest(message)), (0, operators_1.map)(res => {\n            if ((0, ServerMessage_1.isServerMessageFail)(res)) {\n                throw new Error(res.error || \"failed to set session metadata\");\n            }\n        }));\n    }\n    /**\n     * Publish an event and emit event ID when successful\n     * @param event event name\n     * @param data event data\n     * @param callWebhook whether the webhook should be invoked\n     * @returns an Observable that emits event ID when successful\n     */\n    publishEvent(event, data, callWebhook = false) {\n        const message = (0, ClientMessage_1.ClientMessagePublishEvent)({\n            id: (0, types_1.IntNumber)(this.nextReqId++),\n            sessionId: this.sessionId,\n            event,\n            data,\n            callWebhook\n        });\n        return this.onceLinked$.pipe((0, operators_1.flatMap)(_ => this.makeRequest(message)), (0, operators_1.map)(res => {\n            if ((0, ServerMessage_1.isServerMessageFail)(res)) {\n                throw new Error(res.error || \"failed to publish event\");\n            }\n            return res.eventId;\n        }));\n    }\n    sendData(message) {\n        this.ws.sendData(JSON.stringify(message));\n    }\n    updateLastHeartbeat() {\n        this.lastHeartbeatResponse = Date.now();\n    }\n    heartbeat() {\n        if (Date.now() - this.lastHeartbeatResponse > HEARTBEAT_INTERVAL * 2) {\n            this.ws.disconnect();\n            return;\n        }\n        try {\n            this.ws.sendData(\"h\");\n        }\n        catch (_a) { }\n    }\n    makeRequest(message, timeout = REQUEST_TIMEOUT) {\n        const reqId = message.id;\n        try {\n            this.sendData(message);\n        }\n        catch (err) {\n            return (0, rxjs_1.throwError)(err);\n        }\n        // await server message with corresponding id\n        return this.ws.incomingJSONData$.pipe((0, operators_1.timeoutWith)(timeout, (0, rxjs_1.throwError)(new Error(`request ${reqId} timed out`))), (0, operators_1.filter)(m => m.id === reqId), (0, operators_1.take)(1));\n    }\n    authenticate() {\n        const msg = (0, ClientMessage_1.ClientMessageHostSession)({\n            id: (0, types_1.IntNumber)(this.nextReqId++),\n            sessionId: this.sessionId,\n            sessionKey: this.sessionKey\n        });\n        return this.makeRequest(msg).pipe((0, operators_1.map)(res => {\n            if ((0, ServerMessage_1.isServerMessageFail)(res)) {\n                throw new Error(res.error || \"failed to authentcate\");\n            }\n        }));\n    }\n    sendIsLinked() {\n        const msg = (0, ClientMessage_1.ClientMessageIsLinked)({\n            id: (0, types_1.IntNumber)(this.nextReqId++),\n            sessionId: this.sessionId\n        });\n        this.sendData(msg);\n    }\n    sendGetSessionConfig() {\n        const msg = (0, ClientMessage_1.ClientMessageGetSessionConfig)({\n            id: (0, types_1.IntNumber)(this.nextReqId++),\n            sessionId: this.sessionId\n        });\n        this.sendData(msg);\n    }\n}\nexports.WalletSDKConnection = WalletSDKConnection;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}