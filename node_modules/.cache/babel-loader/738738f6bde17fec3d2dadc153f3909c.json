{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nvar _regeneratorRuntime = require(\"/opt/miami-hackathon-starknet-p2e-main/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _toConsumableArray = require(\"/opt/miami-hackathon-starknet-p2e-main/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _asyncToGenerator = require(\"/opt/miami-hackathon-starknet-p2e-main/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decrypt = exports.encrypt = void 0;\n\nvar rxjs_1 = require(\"rxjs\");\n\nvar util_1 = require(\"../util\");\n/**\n *\n * @param plainText string to be encrypted\n * @param secret hex representation of 32-byte secret\n * returns hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes. Remaining bytes are the\n * encrypted plainText.\n */\n\n\nfunction encrypt(_x, _x2) {\n  return _encrypt.apply(this, arguments);\n}\n\nfunction _encrypt() {\n  _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(plainText, secret) {\n    var ivBytes, secretKey, enc, encryptedResult, tagLength, authTag, encryptedPlaintext, authTagBytes, encryptedPlaintextBytes, concatted;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(secret.length !== 64)) {\n              _context2.next = 2;\n              break;\n            }\n\n            throw Error(\"secret must be 256 bits\");\n\n          case 2:\n            ivBytes = crypto.getRandomValues(new Uint8Array(12));\n            _context2.next = 5;\n            return crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), {\n              \"name\": \"aes-gcm\"\n            }, false, [\"encrypt\", \"decrypt\"]);\n\n          case 5:\n            secretKey = _context2.sent;\n            enc = new TextEncoder(); // Will return encrypted plainText with auth tag (ie MAC or checksum) appended at the end\n\n            _context2.next = 9;\n            return window.crypto.subtle.encrypt({\n              name: \"AES-GCM\",\n              iv: ivBytes\n            }, secretKey, enc.encode(plainText));\n\n          case 9:\n            encryptedResult = _context2.sent;\n            tagLength = 16;\n            authTag = encryptedResult.slice(encryptedResult.byteLength - tagLength);\n            encryptedPlaintext = encryptedResult.slice(0, encryptedResult.byteLength - tagLength);\n            authTagBytes = new Uint8Array(authTag);\n            encryptedPlaintextBytes = new Uint8Array(encryptedPlaintext);\n            concatted = new Uint8Array([].concat(_toConsumableArray(ivBytes), _toConsumableArray(authTagBytes), _toConsumableArray(encryptedPlaintextBytes)));\n            return _context2.abrupt(\"return\", (0, util_1.uint8ArrayToHex)(concatted));\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _encrypt.apply(this, arguments);\n}\n\nexports.encrypt = encrypt;\n/**\n *\n * @param cipherText hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes.\n * @param secret hex string representation of 32-byte secret\n */\n\nfunction decrypt(cipherText, secret) {\n  if (secret.length !== 64) throw Error(\"secret must be 256 bits\");\n  return new rxjs_1.Observable(function (subscriber) {\n    void _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var secretKey, encrypted, ivBytes, authTagBytes, encryptedPlaintextBytes, concattedBytes, algo, decrypted, decoder;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), {\n                \"name\": \"aes-gcm\"\n              }, false, [\"encrypt\", \"decrypt\"]);\n\n            case 2:\n              secretKey = _context.sent;\n              encrypted = (0, util_1.hexStringToUint8Array)(cipherText);\n              ivBytes = encrypted.slice(0, 12);\n              authTagBytes = encrypted.slice(12, 28);\n              encryptedPlaintextBytes = encrypted.slice(28);\n              concattedBytes = new Uint8Array([].concat(_toConsumableArray(encryptedPlaintextBytes), _toConsumableArray(authTagBytes)));\n              algo = {\n                name: \"AES-GCM\",\n                iv: new Uint8Array(ivBytes)\n              };\n              _context.prev = 9;\n              _context.next = 12;\n              return window.crypto.subtle.decrypt(algo, secretKey, concattedBytes);\n\n            case 12:\n              decrypted = _context.sent;\n              decoder = new TextDecoder();\n              subscriber.next(decoder.decode(decrypted));\n              subscriber.complete();\n              _context.next = 21;\n              break;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](9);\n              subscriber.error(_context.t0);\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[9, 18]]);\n    }))();\n  });\n}\n\nexports.decrypt = decrypt;","map":{"version":3,"names":["Object","defineProperty","exports","value","decrypt","encrypt","rxjs_1","require","util_1","plainText","secret","length","Error","ivBytes","crypto","getRandomValues","Uint8Array","subtle","importKey","hexStringToUint8Array","secretKey","enc","TextEncoder","window","name","iv","encode","encryptedResult","tagLength","authTag","slice","byteLength","encryptedPlaintext","authTagBytes","encryptedPlaintextBytes","concatted","uint8ArrayToHex","cipherText","Observable","subscriber","encrypted","concattedBytes","algo","decrypted","decoder","TextDecoder","next","decode","complete","error"],"sources":["/opt/miami-hackathon-starknet-p2e-main/node_modules/@coinbase/wallet-sdk/dist/relay/aes256gcm.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decrypt = exports.encrypt = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst util_1 = require(\"../util\");\n/**\n *\n * @param plainText string to be encrypted\n * @param secret hex representation of 32-byte secret\n * returns hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes. Remaining bytes are the\n * encrypted plainText.\n */\nasync function encrypt(plainText, secret) {\n    if (secret.length !== 64)\n        throw Error(`secret must be 256 bits`);\n    const ivBytes = crypto.getRandomValues(new Uint8Array(12));\n    const secretKey = await crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), { \"name\": \"aes-gcm\" }, false, [\"encrypt\", \"decrypt\"]);\n    const enc = new TextEncoder();\n    // Will return encrypted plainText with auth tag (ie MAC or checksum) appended at the end\n    const encryptedResult = await window.crypto.subtle.encrypt({\n        name: \"AES-GCM\",\n        iv: ivBytes\n    }, secretKey, enc.encode(plainText));\n    const tagLength = 16;\n    const authTag = encryptedResult.slice(encryptedResult.byteLength - tagLength);\n    const encryptedPlaintext = encryptedResult.slice(0, encryptedResult.byteLength - tagLength);\n    const authTagBytes = new Uint8Array(authTag);\n    const encryptedPlaintextBytes = new Uint8Array(encryptedPlaintext);\n    const concatted = new Uint8Array([...ivBytes, ...authTagBytes, ...encryptedPlaintextBytes]);\n    return (0, util_1.uint8ArrayToHex)(concatted);\n}\nexports.encrypt = encrypt;\n/**\n *\n * @param cipherText hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes.\n * @param secret hex string representation of 32-byte secret\n */\nfunction decrypt(cipherText, secret) {\n    if (secret.length !== 64)\n        throw Error(`secret must be 256 bits`);\n    return new rxjs_1.Observable((subscriber) => {\n        void (async function () {\n            const secretKey = await crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), { \"name\": \"aes-gcm\" }, false, [\"encrypt\", \"decrypt\"]);\n            const encrypted = (0, util_1.hexStringToUint8Array)(cipherText);\n            const ivBytes = encrypted.slice(0, 12);\n            const authTagBytes = encrypted.slice(12, 28);\n            const encryptedPlaintextBytes = encrypted.slice(28);\n            const concattedBytes = new Uint8Array([...encryptedPlaintextBytes, ...authTagBytes]);\n            const algo = {\n                name: \"AES-GCM\",\n                iv: new Uint8Array(ivBytes)\n            };\n            try {\n                const decrypted = await window.crypto.subtle.decrypt(algo, secretKey, concattedBytes);\n                const decoder = new TextDecoder();\n                subscriber.next(decoder.decode(decrypted));\n                subscriber.complete();\n            }\n            catch (err) {\n                subscriber.error(err);\n            }\n        })();\n    });\n}\nexports.decrypt = decrypt;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}